{
  "src/components/AutoComplete/AutoComplete.react.js": {
    "description": "",
    "displayName": "AutoComplete",
    "methods": [
      {
        "name": "getDataSource",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "props",
            "type": {
              "name": "signature",
              "type": "object",
              "raw": "{\n  /** Location of the anchor for the auto complete */\n  anchorOrigin?: {\n    vertical?: 'top' | 'center' | 'bottom',\n    horizontal?: 'left' | 'middle' | 'right',\n  },\n  /** If true, auto complete is animated as it is toggled */\n  animated?: boolean,\n  /** Dash callback delay in ms - default is 500 ms */\n  dashCallbackDelay?: number,\n  /**\n   * Array of strings or nodes used to populate the list\n   * Alternatively, an Array of Objects with a structure like\n   * {label: 'My label to render', value: 'My value to ship on match'}\n   */\n  dataSource?: Array<any>,\n  /** Config for objects list dataSource */\n  dataSourceConfig?: Object,\n  /** Disables focus ripple when true */\n  disableFocusRipple?: boolean,\n  /** Override style prop for error */\n  errorStyle?: Object,\n  /** The error content to display */\n  errorText?: Node,\n  /** Should the search text have to match exactly to update props server side? */\n  exactMatch?: boolean,\n  /** String name for filter to be applied to user input.\n   * will later be mapped to function\n   */\n  filter?: 'caseInsensitiveFilter' | 'caseSensitiveFilter' | 'defaultFilter' |\n    'fuzzyFilter' | 'levenshteinDistanceFilter' | 'noFilter',\n  /** Dash-assigned callback that gets fired when the input changes. */\n  fireEvent?: () => void,\n  /** The content to use for adding floating label element */\n  floatingLabelText?: Node,\n  /** If true, field receives the property width: 100% */\n  fullWidth?: boolean,\n  /** The hint content to display */\n  hintText?: Node,\n  /** Autocomplete ID */\n  id: string,\n  /** Override style for list */\n  listStyle?: Object,\n  /** The max number of search results to be shown. By default it shows\n   * all the items which matches filter */\n  maxSearchResults?: number,\n  /** Delay for closing time of the menu */\n  menuCloseDelay?: number,\n  /** Props to be passed to menu */\n  menuProps?: Object,\n  /** Override style for menu */\n  menuStyle?: Object,\n  /** Auto complete menu is open if true */\n  open?: boolean,\n  /** If true, the list item is showed when a focus event triggers */\n  openOnFocus?: boolean,\n  /** Props to be passed to popover */\n  popoverProps?: Object,\n  /** Text being input to auto complete */\n  searchText?: string,\n  /** Value in the dataSource found by using searchText\n   * NOTE exactMatch must be true for this to work\n   */\n  searchValue?: any,\n  /** Dash callback to update props on the server. */\n  setProps?: () => void,\n  /** Override the inline-styles of the root element */\n  style?: Object,\n  /** Origin for location of target */\n  targetOrigin?: {\n    vertical?: 'top' | 'center' | 'bottom',\n    horizontal?: 'left' | 'middle' | 'right',\n  },\n  /** Override the inline-styles of AutoComplete's TextField element */\n  textFieldStyle?: Object,\n  /** If defined, the AutoComplete component hits this URL to search instead of string matching */\n  searchEndpointAPI?: string,\n  /** General JSON structure to send to the server */\n  searchJSONStructure?: Object,\n}",
              "signature": {
                "properties": [
                  {
                    "key": "anchorOrigin",
                    "value": {
                      "name": "signature",
                      "type": "object",
                      "raw": "{\n  vertical?: 'top' | 'center' | 'bottom',\n  horizontal?: 'left' | 'middle' | 'right',\n}",
                      "signature": {
                        "properties": [
                          {
                            "key": "vertical",
                            "value": {
                              "name": "union",
                              "raw": "'top' | 'center' | 'bottom'",
                              "elements": [
                                {
                                  "name": "literal",
                                  "value": "'top'"
                                },
                                {
                                  "name": "literal",
                                  "value": "'center'"
                                },
                                {
                                  "name": "literal",
                                  "value": "'bottom'"
                                }
                              ],
                              "required": false
                            }
                          },
                          {
                            "key": "horizontal",
                            "value": {
                              "name": "union",
                              "raw": "'left' | 'middle' | 'right'",
                              "elements": [
                                {
                                  "name": "literal",
                                  "value": "'left'"
                                },
                                {
                                  "name": "literal",
                                  "value": "'middle'"
                                },
                                {
                                  "name": "literal",
                                  "value": "'right'"
                                }
                              ],
                              "required": false
                            }
                          }
                        ]
                      },
                      "required": false
                    }
                  },
                  {
                    "key": "animated",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "dashCallbackDelay",
                    "value": {
                      "name": "number",
                      "required": false
                    }
                  },
                  {
                    "key": "dataSource",
                    "value": {
                      "name": "Array",
                      "elements": [
                        {
                          "name": "any"
                        }
                      ],
                      "raw": "Array<any>",
                      "required": false
                    }
                  },
                  {
                    "key": "dataSourceConfig",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "disableFocusRipple",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "errorStyle",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "errorText",
                    "value": {
                      "name": "Node",
                      "required": false
                    }
                  },
                  {
                    "key": "exactMatch",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "filter",
                    "value": {
                      "name": "union",
                      "raw": "'caseInsensitiveFilter' | 'caseSensitiveFilter' | 'defaultFilter' |\n  'fuzzyFilter' | 'levenshteinDistanceFilter' | 'noFilter'",
                      "elements": [
                        {
                          "name": "literal",
                          "value": "'caseInsensitiveFilter'"
                        },
                        {
                          "name": "literal",
                          "value": "'caseSensitiveFilter'"
                        },
                        {
                          "name": "literal",
                          "value": "'defaultFilter'"
                        },
                        {
                          "name": "literal",
                          "value": "'fuzzyFilter'"
                        },
                        {
                          "name": "literal",
                          "value": "'levenshteinDistanceFilter'"
                        },
                        {
                          "name": "literal",
                          "value": "'noFilter'"
                        }
                      ],
                      "required": false
                    }
                  },
                  {
                    "key": "fireEvent",
                    "value": {
                      "name": "signature",
                      "type": "function",
                      "raw": "() => void",
                      "signature": {
                        "arguments": [],
                        "return": {
                          "name": "void"
                        }
                      },
                      "required": false
                    }
                  },
                  {
                    "key": "floatingLabelText",
                    "value": {
                      "name": "Node",
                      "required": false
                    }
                  },
                  {
                    "key": "fullWidth",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "hintText",
                    "value": {
                      "name": "Node",
                      "required": false
                    }
                  },
                  {
                    "key": "id",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "listStyle",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "maxSearchResults",
                    "value": {
                      "name": "number",
                      "required": false
                    }
                  },
                  {
                    "key": "menuCloseDelay",
                    "value": {
                      "name": "number",
                      "required": false
                    }
                  },
                  {
                    "key": "menuProps",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "menuStyle",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "open",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "openOnFocus",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "popoverProps",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "searchText",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "searchValue",
                    "value": {
                      "name": "any",
                      "required": false
                    }
                  },
                  {
                    "key": "setProps",
                    "value": {
                      "name": "signature",
                      "type": "function",
                      "raw": "() => void",
                      "signature": {
                        "arguments": [],
                        "return": {
                          "name": "void"
                        }
                      },
                      "required": false
                    }
                  },
                  {
                    "key": "style",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "targetOrigin",
                    "value": {
                      "name": "signature",
                      "type": "object",
                      "raw": "{\n  vertical?: 'top' | 'center' | 'bottom',\n  horizontal?: 'left' | 'middle' | 'right',\n}",
                      "signature": {
                        "properties": [
                          {
                            "key": "vertical",
                            "value": {
                              "name": "union",
                              "raw": "'top' | 'center' | 'bottom'",
                              "elements": [
                                {
                                  "name": "literal",
                                  "value": "'top'"
                                },
                                {
                                  "name": "literal",
                                  "value": "'center'"
                                },
                                {
                                  "name": "literal",
                                  "value": "'bottom'"
                                }
                              ],
                              "required": false
                            }
                          },
                          {
                            "key": "horizontal",
                            "value": {
                              "name": "union",
                              "raw": "'left' | 'middle' | 'right'",
                              "elements": [
                                {
                                  "name": "literal",
                                  "value": "'left'"
                                },
                                {
                                  "name": "literal",
                                  "value": "'middle'"
                                },
                                {
                                  "name": "literal",
                                  "value": "'right'"
                                }
                              ],
                              "required": false
                            }
                          }
                        ]
                      },
                      "required": false
                    }
                  },
                  {
                    "key": "textFieldStyle",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "searchEndpointAPI",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "searchJSONStructure",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  }
                ]
              },
              "alias": "Props"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "Array",
            "elements": [
              {
                "name": "any"
              }
            ],
            "raw": "Array<any>"
          }
        }
      },
      {
        "name": "handleChange",
        "docblock": "calls function to fire callback and updates searchText in state\n@param searchText\n@param dataSource\n@param params",
        "modifiers": [],
        "params": [
          {
            "name": "searchText",
            "description": null,
            "type": {
              "name": "string"
            }
          },
          {
            "name": "dataSource",
            "description": null,
            "type": {
              "name": "Array",
              "alias": "Array"
            }
          },
          {
            "name": "params",
            "description": null,
            "type": {
              "name": "Object",
              "alias": "Object"
            }
          }
        ],
        "returns": null,
        "description": "calls function to fire callback and updates searchText in state"
      },
      {
        "name": "_updateTextProps",
        "docblock": "executes setProps function with searchText to update searchText in props;\nfires Dash callback event\n@param searchText\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "searchText",
            "description": null,
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null,
        "description": "executes setProps function with searchText to update searchText in props;\nfires Dash callback event"
      }
    ],
    "props": {
      "anchorOrigin": {
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  vertical?: 'top' | 'center' | 'bottom',\n  horizontal?: 'left' | 'middle' | 'right',\n}",
          "signature": {
            "properties": [
              {
                "key": "vertical",
                "value": {
                  "name": "union",
                  "raw": "'top' | 'center' | 'bottom'",
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'top'"
                    },
                    {
                      "name": "literal",
                      "value": "'center'"
                    },
                    {
                      "name": "literal",
                      "value": "'bottom'"
                    }
                  ],
                  "required": false
                }
              },
              {
                "key": "horizontal",
                "value": {
                  "name": "union",
                  "raw": "'left' | 'middle' | 'right'",
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'left'"
                    },
                    {
                      "name": "literal",
                      "value": "'middle'"
                    },
                    {
                      "name": "literal",
                      "value": "'right'"
                    }
                  ],
                  "required": false
                }
              }
            ]
          }
        },
        "required": false,
        "description": "Location of the anchor for the auto complete",
        "defaultValue": {
          "value": "{vertical: 'bottom', horizontal: 'left'}",
          "computed": false
        }
      },
      "animated": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "If true, auto complete is animated as it is toggled",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "dashCallbackDelay": {
        "flowType": {
          "name": "number"
        },
        "required": false,
        "description": "Dash callback delay in ms - default is 500 ms",
        "defaultValue": {
          "value": "500",
          "computed": false
        }
      },
      "dataSource": {
        "flowType": {
          "name": "Array",
          "elements": [
            {
              "name": "any"
            }
          ],
          "raw": "Array<any>"
        },
        "required": false,
        "description": "Array of strings or nodes used to populate the list\nAlternatively, an Array of Objects with a structure like\n{label: 'My label to render', value: 'My value to ship on match'}",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "dataSourceConfig": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Config for objects list dataSource",
        "defaultValue": {
          "value": "{text: 'label', value: 'value'}",
          "computed": false
        }
      },
      "disableFocusRipple": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "Disables focus ripple when true",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "errorStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override style prop for error",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "errorText": {
        "flowType": {
          "name": "Node"
        },
        "required": false,
        "description": "The error content to display",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "exactMatch": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "Should the search text have to match exactly to update props server side?",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "filter": {
        "flowType": {
          "name": "union",
          "raw": "'caseInsensitiveFilter' | 'caseSensitiveFilter' | 'defaultFilter' |\n  'fuzzyFilter' | 'levenshteinDistanceFilter' | 'noFilter'",
          "elements": [
            {
              "name": "literal",
              "value": "'caseInsensitiveFilter'"
            },
            {
              "name": "literal",
              "value": "'caseSensitiveFilter'"
            },
            {
              "name": "literal",
              "value": "'defaultFilter'"
            },
            {
              "name": "literal",
              "value": "'fuzzyFilter'"
            },
            {
              "name": "literal",
              "value": "'levenshteinDistanceFilter'"
            },
            {
              "name": "literal",
              "value": "'noFilter'"
            }
          ]
        },
        "required": false,
        "description": "String name for filter to be applied to user input.\nwill later be mapped to function",
        "defaultValue": {
          "value": "\"defaultFilter\"",
          "computed": false
        }
      },
      "fireEvent": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the input changes.",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "floatingLabelText": {
        "flowType": {
          "name": "Node"
        },
        "required": false,
        "description": "The content to use for adding floating label element",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "fullWidth": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "If true, field receives the property width: 100%",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "hintText": {
        "flowType": {
          "name": "Node"
        },
        "required": false,
        "description": "The hint content to display",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "id": {
        "flowType": {
          "name": "string"
        },
        "required": true,
        "description": "Autocomplete ID"
      },
      "listStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override style for list",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "maxSearchResults": {
        "flowType": {
          "name": "number"
        },
        "required": false,
        "description": "The max number of search results to be shown. By default it shows\nall the items which matches filter"
      },
      "menuCloseDelay": {
        "flowType": {
          "name": "number"
        },
        "required": false,
        "description": "Delay for closing time of the menu",
        "defaultValue": {
          "value": "300",
          "computed": false
        }
      },
      "menuProps": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Props to be passed to menu",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "menuStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override style for menu",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "open": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "Auto complete menu is open if true",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "openOnFocus": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "If true, the list item is showed when a focus event triggers",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "popoverProps": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Props to be passed to popover",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "searchText": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "Text being input to auto complete",
        "defaultValue": {
          "value": "\"\"",
          "computed": false
        }
      },
      "searchValue": {
        "flowType": {
          "name": "any"
        },
        "required": false,
        "description": "Value in the dataSource found by using searchText\nNOTE exactMatch must be true for this to work",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "setProps": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "required": false,
        "description": "Dash callback to update props on the server.",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "style": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-styles of the root element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "targetOrigin": {
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  vertical?: 'top' | 'center' | 'bottom',\n  horizontal?: 'left' | 'middle' | 'right',\n}",
          "signature": {
            "properties": [
              {
                "key": "vertical",
                "value": {
                  "name": "union",
                  "raw": "'top' | 'center' | 'bottom'",
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'top'"
                    },
                    {
                      "name": "literal",
                      "value": "'center'"
                    },
                    {
                      "name": "literal",
                      "value": "'bottom'"
                    }
                  ],
                  "required": false
                }
              },
              {
                "key": "horizontal",
                "value": {
                  "name": "union",
                  "raw": "'left' | 'middle' | 'right'",
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'left'"
                    },
                    {
                      "name": "literal",
                      "value": "'middle'"
                    },
                    {
                      "name": "literal",
                      "value": "'right'"
                    }
                  ],
                  "required": false
                }
              }
            ]
          }
        },
        "required": false,
        "description": "Origin for location of target",
        "defaultValue": {
          "value": "{vertical: 'top', horizontal: 'left'}",
          "computed": false
        }
      },
      "textFieldStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-styles of AutoComplete's TextField element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "searchEndpointAPI": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "If defined, the AutoComplete component hits this URL to search instead of string matching",
        "defaultValue": {
          "value": "undefined",
          "computed": true
        }
      },
      "searchJSONStructure": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "General JSON structure to send to the server",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/components/BottomNavigation/BottomNavigation.react.js": {
    "description": "BottomNavigationItem is an item in a BottomNavigation component",
    "displayName": "BottomNavigation",
    "methods": [
      {
        "name": "buildBottomNavigationItem",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "navItem",
            "type": {
              "name": "signature",
              "type": "object",
              "raw": "{\n  /** Label to use for the navigation item */\n  label: string,\n  /** Icon to display for the navigation item */\n  icon: Node | string,\n  /** Value for the navigation item */\n  value: string | number,\n  /** ID of component to jump to when this option is selected */\n  targetId?: string,\n  /** Class to apply to the icon span */\n  iconClassName?: string,\n}",
              "signature": {
                "properties": [
                  {
                    "key": "label",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "icon",
                    "value": {
                      "name": "union",
                      "raw": "Node | string",
                      "elements": [
                        {
                          "name": "Node"
                        },
                        {
                          "name": "string"
                        }
                      ],
                      "required": true
                    }
                  },
                  {
                    "key": "value",
                    "value": {
                      "name": "union",
                      "raw": "string | number",
                      "elements": [
                        {
                          "name": "string"
                        },
                        {
                          "name": "number"
                        }
                      ],
                      "required": true
                    }
                  },
                  {
                    "key": "targetId",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "iconClassName",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  }
                ]
              },
              "alias": "T_NAV_ITEM"
            }
          },
          {
            "name": "selectedIndex",
            "type": {
              "name": "number"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "flowType": {
          "name": "string"
        },
        "required": true,
        "description": "The ID used to identify this component in Dash callbacks"
      },
      "navItems": {
        "flowType": {
          "name": "Array",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{\n  /** Label to use for the navigation item */\n  label: string,\n  /** Icon to display for the navigation item */\n  icon: Node | string,\n  /** Value for the navigation item */\n  value: string | number,\n  /** ID of component to jump to when this option is selected */\n  targetId?: string,\n  /** Class to apply to the icon span */\n  iconClassName?: string,\n}",
              "signature": {
                "properties": [
                  {
                    "key": "label",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "icon",
                    "value": {
                      "name": "union",
                      "raw": "Node | string",
                      "elements": [
                        {
                          "name": "Node"
                        },
                        {
                          "name": "string"
                        }
                      ],
                      "required": true
                    }
                  },
                  {
                    "key": "value",
                    "value": {
                      "name": "union",
                      "raw": "string | number",
                      "elements": [
                        {
                          "name": "string"
                        },
                        {
                          "name": "number"
                        }
                      ],
                      "required": true
                    }
                  },
                  {
                    "key": "targetId",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "iconClassName",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  }
                ]
              }
            }
          ],
          "raw": "Array<T_NAV_ITEM>"
        },
        "required": true,
        "description": "Array of navigation item props to pass to BottomNavigationItem"
      },
      "selectedIndex": {
        "flowType": {
          "name": "number"
        },
        "required": false,
        "description": "Initial selected index for the BottomNavigation",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "selectedStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Style to apply to the selected icon",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "setProps": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "(props: { selectedIndex: number }) => void",
          "signature": {
            "arguments": [
              {
                "name": "props",
                "type": {
                  "name": "signature",
                  "type": "object",
                  "raw": "{ selectedIndex: number }",
                  "signature": {
                    "properties": [
                      {
                        "key": "selectedIndex",
                        "value": {
                          "name": "number",
                          "required": true
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "required": false,
        "description": "Dash-assigned callback that should be called whenever any of the\nproperties change",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      }
    }
  },
  "src/components/Card/Card.react.js": {
    "description": "",
    "displayName": "Card",
    "methods": [],
    "props": {
      "id": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "ID for Card",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "children": {
        "flowType": {
          "name": "Node"
        },
        "required": false,
        "description": "Can be used to render elements inside the Card.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "className": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class name of the root element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "containerStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-styles of the container element.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "expandable": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "If true, this card component is expandable.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "_expanded": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "Set to null to keep the component uncontrolled.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "initiallyExpanded": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "Whether this card is initially expanded.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "style": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-styles of the root element.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "showExpandableButton": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "If true, this card component will include a button to expand the card.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "headerActAsExpander": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "If true, a click on this card component expands the card.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "headerAvatar": {
        "flowType": {
          "name": "Node"
        },
        "required": false,
        "description": "This is the Avatar element to be displayed on the Card Header. If avatar is an Avatar or\nother element, it will be rendered. If avatar is a string, it will be used as the image src\nfor an Avatar.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "headerStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-styles of the root element.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "headerSubtitle": {
        "flowType": {
          "name": "Node"
        },
        "required": false,
        "description": "Can be used to render a subtitle in Card Header.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "headerSubtitleColor": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "Override the subtitle color.",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "headerSubtitleStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-styles of the subtitle.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "headerTextStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-styles of the text.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "headerTitle": {
        "flowType": {
          "name": "Node"
        },
        "required": false,
        "description": "Can be used to render a title in Card Header.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "headerTitleColor": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "Override the title color.",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "headerTitleStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-styles of the title.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "headerIconStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "titleExpandable": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "If true, this card component is expandable.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "titleStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-styles of the root element.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "titleSubtitle": {
        "flowType": {
          "name": "Node"
        },
        "required": false,
        "description": "Can be used to render a subtitle in the Card Title.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "titleSubtitleColor": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "Override the subtitle color.",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "titleSubtitleStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-styles of the subtitle.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "titleTitle": {
        "flowType": {
          "name": "Node"
        },
        "required": false,
        "description": "Can be used to render a title in the Card Title.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "titleColor": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "Override the title color.",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "titleTitleStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-styles of the title.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "textExpandable": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "If true, this card component is expandable.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "textColor": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "Override the CardText color.",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "textStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-styles of the root element.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/components/Checkbox/Checkbox.react.js": {
    "description": "",
    "displayName": "Checkbox",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "checked",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "checked": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "Checkbox is checked if true",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disabled": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "Checkbox is disabled if true",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "fireEvent": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "required": false,
        "description": "A callback for firing events to dash",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "iconStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Overrides the inline-styles of the icon element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "id": {
        "flowType": {
          "name": "string"
        },
        "required": true,
        "description": "The element's ID"
      },
      "inputStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Overrides the inline styles of the input element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "label": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "The text label for the checkbox",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "labelPosition": {
        "flowType": {
          "name": "union",
          "raw": "'left' | 'right'",
          "elements": [
            {
              "name": "literal",
              "value": "'left'"
            },
            {
              "name": "literal",
              "value": "'right'"
            }
          ]
        },
        "required": false,
        "description": "Where the label will be placed next to the checkbox",
        "defaultValue": {
          "value": "'right'",
          "computed": false
        }
      },
      "labelStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Overrides the inline styles of the Checkbox element label",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "setProps": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "required": false,
        "description": "Dash callback to update props on the server",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "style": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline styles of the root element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/components/CircularProgress/CircularProgress.react.js": {
    "description": "",
    "displayName": "CircularProgress",
    "methods": [],
    "props": {
      "color": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "Override the progress's color",
        "defaultValue": {
          "value": "'#00BCD4'",
          "computed": false
        }
      },
      "innerStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Style for inner wrapper div",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "mode": {
        "flowType": {
          "name": "literal",
          "value": "'indeterminate'"
        },
        "required": true,
        "description": "The mode of show your progress, for now, will always be indeterminate"
      },
      "size": {
        "flowType": {
          "name": "number"
        },
        "required": false,
        "description": "The diameter of the progress in pixels",
        "defaultValue": {
          "value": "40",
          "computed": false
        }
      },
      "style": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-style of the root element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "thickness": {
        "flowType": {
          "name": "number"
        },
        "required": false,
        "description": "Stroke width in pixels",
        "defaultValue": {
          "value": "3.5",
          "computed": false
        }
      }
    }
  },
  "src/components/Dialog/Dialog.react.js": {
    "description": "",
    "displayName": "Dialog",
    "methods": [
      {
        "name": "changeDialogOpenStatus",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "open",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "void"
          }
        }
      }
    ],
    "props": {
      "id": {
        "flowType": {
          "name": "string"
        },
        "required": true,
        "description": "Dialog ID"
      },
      "actions": {
        "flowType": {
          "name": "union",
          "raw": "Node | Array<Node>",
          "elements": [
            {
              "name": "Node"
            },
            {
              "name": "Array",
              "elements": [
                {
                  "name": "Node"
                }
              ],
              "raw": "Array<Node>"
            }
          ]
        },
        "required": false,
        "description": "Actions component or list of components for the Dialog",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "children": {
        "flowType": {
          "name": "Node"
        },
        "required": false,
        "description": "Children to render inside of the Dialog",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "className": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "CSS class name of the root element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "modal": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "Is the Dialog a modal (must click on an action to close)?\n\nNOTE: If the Dialog is created with modal=False, the callback that controls opening and closing\nthe Dialog should include the component's open value as a state, and check whether it is either\nalready open or closed before attempting to open or close it. See comments for the open prop.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "open": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "Is the dialog open?\n\nIMPORTANT: When using this component in Dash, a listener must be set up (either as state or\nan input) for this component's props.open value in order to achieve the desired behavior.\nIf such a listener is not in place, the non-modal version of this dialog will contaminate\nother callbacks in the browser",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "setProps": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "(props: { modal?: boolean, open?: boolean }) => void",
          "signature": {
            "arguments": [
              {
                "name": "props",
                "type": {
                  "name": "signature",
                  "type": "object",
                  "raw": "{ modal?: boolean, open?: boolean }",
                  "signature": {
                    "properties": [
                      {
                        "key": "modal",
                        "value": {
                          "name": "boolean",
                          "required": false
                        }
                      },
                      {
                        "key": "open",
                        "value": {
                          "name": "boolean",
                          "required": false
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "required": false,
        "description": "Dash callback to update props on the server",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      }
    }
  },
  "src/components/Divider/Divider.react.js": {
    "description": "",
    "displayName": "Divider",
    "methods": [],
    "props": {
      "inset": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "If true, the Divider will be indented",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "style": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-styles of the root element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/components/Drawer/Drawer.react.js": {
    "description": "",
    "displayName": "Drawer",
    "methods": [
      {
        "name": "changeDrawerStatus",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "open",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "children": {
        "flowType": {
          "name": "Node"
        },
        "required": false,
        "description": "The contents to render inside the Drawer",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "className": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class name of the root element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "containerClassName": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class name of the container element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "containerClosedClassName": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class name to add to the container element when it is closed",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "containerStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline styles of the container element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "disableSwipeToOpen": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "If true, swiping sideways when the Drawer is closed will not open it",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "docked": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "If true, the Drawer will be docked. In this state, the overlay won't show and clicking on a\nmenu item will not close the Drawer.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "id": {
        "flowType": {
          "name": "string"
        },
        "required": true,
        "description": "Component ID"
      },
      "open": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "If true, the Drawer is opened. Whether true or false,\nthis guarantees that the Drawer is a controlled component",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "openSecondary": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "If true, the Drawer is positioned to open from the opposite side",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "overlayClassName": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class name to add to the Overlay component that is rendered behind the Drawer",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "overlayStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-styles of the Overlay component that is rendered behind the Drawer",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "setProps": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "required": false,
        "description": "Dash callback to update props",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "style": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline styles of the root element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "swipeAreaWidth": {
        "flowType": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the left most (or right most) area in pixels where the Drawer can be swiped\nopen from. Setting this to null spans that area to the entire page (CAUTION! Setting this\nproperty to null might cause issues with sliders and swipeable Tabs: use at your own risk).",
        "defaultValue": {
          "value": "30",
          "computed": false
        }
      },
      "width": {
        "flowType": {
          "name": "union",
          "raw": "string | number",
          "elements": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The width of the Drawer in pixels or percentage in string format ex. 50% to fill half of the\nwindow or 100% and so on. Defaults to using the values from theme.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "zDepth": {
        "flowType": {
          "name": "number"
        },
        "required": false,
        "description": "The zDepth of the Drawer.",
        "defaultValue": {
          "value": "2",
          "computed": false
        }
      }
    }
  },
  "src/components/DropDownMenu/DropDownMenu.react.js": {
    "description": "A Dash material-ui DropDownMenu component",
    "displayName": "DropDownMenu",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": {
              "name": "object",
              "alias": "object"
            }
          },
          {
            "name": "index",
            "type": {
              "name": "number"
            }
          },
          {
            "name": "value",
            "type": {
              "name": "any"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "buildMenuItem",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "item",
            "type": {
              "name": "signature",
              "type": "object",
              "raw": "{\n  /** If true, a checkmark will be rendered to the left of the item */\n  checked?: boolean,\n  /** ELements passed as children to the underlying ListItem */\n  children?: Node,\n  /**\n   * A field able to hold any additional data a Dash user may want to include with a menu item,\n   * but does not want rendered on screen.\n   */\n  customData: any,\n  /** If true, the menu item will be disabled */\n  disabled?: boolean,\n  /**\n   * The text to display in the dropdown menu when this item is selected (if not given,\n   * the menu will use the primaryText).\n   */\n  label?: string,\n  /**\n   * The text shown in the open menu and, if label is not given, also used to show the name\n   * of the selected item when the menu is closed.\n   */\n  primaryText: string,\n  /** Can be used to render secondary text within the menu item */\n  secondaryText?: string,\n  /** Override the inline styles of the root element */\n  style?: Object,\n  /** The value of the menu item */\n  value: any,\n}",
              "signature": {
                "properties": [
                  {
                    "key": "checked",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "children",
                    "value": {
                      "name": "Node",
                      "required": false
                    }
                  },
                  {
                    "key": "customData",
                    "value": {
                      "name": "any",
                      "required": true
                    }
                  },
                  {
                    "key": "disabled",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "label",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "primaryText",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "secondaryText",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "style",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "value",
                    "value": {
                      "name": "any",
                      "required": true
                    }
                  }
                ]
              },
              "alias": "SD_MENU_ITEM"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "anchorOrigin": {
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  vertical?: 'top' | 'center' | 'bottom',\n  horizontal?: 'left' | 'middle' | 'right',\n}",
          "signature": {
            "properties": [
              {
                "key": "vertical",
                "value": {
                  "name": "union",
                  "raw": "'top' | 'center' | 'bottom'",
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'top'"
                    },
                    {
                      "name": "literal",
                      "value": "'center'"
                    },
                    {
                      "name": "literal",
                      "value": "'bottom'"
                    }
                  ],
                  "required": false
                }
              },
              {
                "key": "horizontal",
                "value": {
                  "name": "union",
                  "raw": "'left' | 'middle' | 'right'",
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'left'"
                    },
                    {
                      "name": "literal",
                      "value": "'middle'"
                    },
                    {
                      "name": "literal",
                      "value": "'right'"
                    }
                  ],
                  "required": false
                }
              }
            ]
          }
        },
        "required": false,
        "description": "This is the point on the anchor that the popover's targetOrigin will attach to.\nOptions: vertical: [top, center, bottom] horizontal: [left, middle, right].",
        "defaultValue": {
          "value": "{ vertical: 'top', horizontal: 'left'}",
          "computed": false
        }
      },
      "animated": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "If true, the popover will apply transitions when it gets added to the DOM.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "autoWidth": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "The width will automatically be set according to the items inside the menu. To control\nthis width in css instead, set this prop to false.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "className": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "The css class name of the root element.",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "disabled": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "Disables the menu.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "fireEvent": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the input changes.",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "iconButton": {
        "flowType": {
          "name": "Node"
        },
        "required": false,
        "description": "Overrides default SvgIcon dropdown arrow component."
      },
      "iconStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Overrides the styles of icon element.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "id": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "The element's ID."
      },
      "labelStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Overrides the styles of label when the DropDownMenu is inactive.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "listStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "The style object to use to override underlying list style.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "maxHeight": {
        "flowType": {
          "name": "number"
        },
        "required": false,
        "description": "The maximum height of the Menu when it is displayed.",
        "defaultValue": {
          "value": "500",
          "computed": false
        }
      },
      "menuItemStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-styles of menu items.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "menuStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Overrides the styles of Menu when the DropDownMenu is displayed.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "openImmediately": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "Set to true to have the DropDownMenu automatically open on mount.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "options": {
        "flowType": {
          "name": "Array",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{\n  /** If true, a checkmark will be rendered to the left of the item */\n  checked?: boolean,\n  /** ELements passed as children to the underlying ListItem */\n  children?: Node,\n  /**\n   * A field able to hold any additional data a Dash user may want to include with a menu item,\n   * but does not want rendered on screen.\n   */\n  customData: any,\n  /** If true, the menu item will be disabled */\n  disabled?: boolean,\n  /**\n   * The text to display in the dropdown menu when this item is selected (if not given,\n   * the menu will use the primaryText).\n   */\n  label?: string,\n  /**\n   * The text shown in the open menu and, if label is not given, also used to show the name\n   * of the selected item when the menu is closed.\n   */\n  primaryText: string,\n  /** Can be used to render secondary text within the menu item */\n  secondaryText?: string,\n  /** Override the inline styles of the root element */\n  style?: Object,\n  /** The value of the menu item */\n  value: any,\n}",
              "signature": {
                "properties": [
                  {
                    "key": "checked",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "children",
                    "value": {
                      "name": "Node",
                      "required": false
                    }
                  },
                  {
                    "key": "customData",
                    "value": {
                      "name": "any",
                      "required": true
                    }
                  },
                  {
                    "key": "disabled",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "label",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "primaryText",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "secondaryText",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "style",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "value",
                    "value": {
                      "name": "any",
                      "required": true
                    }
                  }
                ]
              }
            }
          ],
          "raw": "Array<SD_MENU_ITEM>"
        },
        "required": false,
        "description": "Used to create the MenuItems to populate the Menu with. A Dash user passes in a list of dict\nitems, each one having at least a `value` and `primaryText`. If the 'label' is used,\nthat value will be used to render the representation of that item within the field.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "selectedMenuItemStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-styles of selected menu items.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "setProps": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "required": false,
        "description": "Dash callback to update props on the server.",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "style": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-styles of the root element.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "targetOrigin": {
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  vertical?: 'top' | 'center' | 'bottom',\n  horizontal?: 'left' | 'middle' | 'right',\n}",
          "signature": {
            "properties": [
              {
                "key": "vertical",
                "value": {
                  "name": "union",
                  "raw": "'top' | 'center' | 'bottom'",
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'top'"
                    },
                    {
                      "name": "literal",
                      "value": "'center'"
                    },
                    {
                      "name": "literal",
                      "value": "'bottom'"
                    }
                  ],
                  "required": false
                }
              },
              {
                "key": "horizontal",
                "value": {
                  "name": "union",
                  "raw": "'left' | 'middle' | 'right'",
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'left'"
                    },
                    {
                      "name": "literal",
                      "value": "'middle'"
                    },
                    {
                      "name": "literal",
                      "value": "'right'"
                    }
                  ],
                  "required": false
                }
              }
            ]
          }
        },
        "required": false,
        "description": "This is the point on the popover which will attach to the anchor's origin.\nOptions: vertical: [top, center, bottom] horizontal: [left, middle, right].",
        "defaultValue": {
          "value": "{vertical: 'top', horizontal: 'left'}",
          "computed": false
        }
      },
      "underlineStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Overrides the inline-styles of the underline.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "value": {
        "flowType": {
          "name": "any"
        },
        "required": true,
        "description": "The value of the selected menu item."
      }
    }
  },
  "src/components/FlatButton/FlatButton.react.js": {
    "description": "",
    "displayName": "FlatButton",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "backgroundColor": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "Button color when *no* hover event is triggered",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "children": {
        "flowType": {
          "name": "Node"
        },
        "required": false,
        "description": "This is what will be displayed inside the button.\nIf a label is specified, the text within the label prop will\nbe displayed. Otherwise, the component will expect children\nwhich will then be displayed. (In our example,\nwe are nesting an `<input type=\"file\" />` and a `span`\nthat acts as our label to be displayed.) This only\napplies to flat and raised buttons.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "className": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "CSS class name of the root element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "disableTouchRipple": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "If true, the element's ripple effect will be disabled",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disabled": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "Disable the button?",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "fireEvent": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "required": false,
        "description": "Dash callback to trigger an event handler",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "fullWidth": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "If true, the button will take up the full width of its container",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "hoverColor": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "Color of button when mouse hovers over",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "href": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "The URL to link to when the button is clicked",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "icon": {
        "flowType": {
          "name": "Node"
        },
        "required": false,
        "description": "Use this property to display an icon",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "id": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "Element ID"
      },
      "label": {
        "flowType": {
          "name": "string"
        },
        "required": true,
        "description": "Label for the button"
      },
      "labelPosition": {
        "flowType": {
          "name": "union",
          "raw": "'before' | 'after'",
          "elements": [
            {
              "name": "literal",
              "value": "'before'"
            },
            {
              "name": "literal",
              "value": "'after'"
            }
          ]
        },
        "required": false,
        "description": "Place label before or after the passed children",
        "defaultValue": {
          "value": "'after'",
          "computed": false
        }
      },
      "labelStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline styles of the button's label element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "n_clicks": {
        "flowType": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number fo times that this element has been clicked",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_previous": {
        "flowType": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the previous number of times this element has been clicked",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "primary": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "If true, colors button according to primaryTextColor from the MuiTheme",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "rippleColor": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "Color for the ripple when the button is clicked",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "secondary": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "If true, colors button according to secondaryTextColor from the theme.\nThe primary prop has precendent if set to true.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "setProps": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "required": false,
        "description": "Dash callback to update props",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "style": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline styles of the root element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/components/FontIcon/FontIcon.react.js": {
    "description": "",
    "displayName": "FontIcon",
    "methods": [],
    "props": {
      "id": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "id for the component",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "color": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "font color of the font icon;\nIf not specified, this component will default\nto muiTheme.palette.textColor",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "className": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "defines specific icon when using custom icon font\nor defines font when using public icon font",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "hoverColor": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "icon color when the mouse hovers over the icon",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "iconName": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "defines specific icon when using public icon font",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "style": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "override inline-styles of root element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/components/IconButton/IconButton.react.js": {
    "description": "",
    "displayName": "IconButton",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "children": {
        "flowType": {
          "name": "Node"
        },
        "required": false,
        "description": "Used to pass a FontIcon element as the icon for the button\nSee method 3 at http://www.material-ui.com/#/components/icon-button\nNote: currently unable to pass in FontIcon component as child, you will need\nto use method 3 at the above link",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "className": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class name of the root element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "disableTouchRipple": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "If true, the element's ripple effect will be disabled",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disabled": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "Disable the button?",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "fireEvent": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "required": false,
        "description": "Dash callback to trigger an event handler",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "hoveredStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-styles of the root element when the component is hovered",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "href": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "The URL to link to when the button is clicked",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "iconClassName": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class name of the icon. Used for setting the icon with a stylesheet",
        "defaultValue": {
          "value": "'material-icons'",
          "computed": false
        }
      },
      "iconStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-styles of the icon element.\nNote: you can specify iconHoverColor as a String inside this object.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "id": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "Element ID"
      },
      "n_clicks": {
        "flowType": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number fo times that this element has been clicked",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_previous": {
        "flowType": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the previous number of times this element has been clicked",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "setProps": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "required": false,
        "description": "Dash callback to update props",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "style": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-styles of the root element.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "tooltip": {
        "flowType": {
          "name": "Node"
        },
        "required": false,
        "description": "The text to supply to the element's tooltip",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "tooltipPosition": {
        "flowType": {
          "name": "unknown"
        },
        "required": false,
        "description": "The vertical and horizontal positions, respectively, of the element's tooltip.\nPossible values are: \"bottom-center\", \"top-center\", \"bottom-right\", \"top-right\",\n\"bottom-left\", and \"top-left\".",
        "defaultValue": {
          "value": "'bottom-center'",
          "computed": false
        }
      },
      "tooltipStyles": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-styles of the tooltip element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "touch": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "If true, increase the tooltip element's size.\nUseful for increasing tooltip readability on mobile devices.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "src/components/Paper/Paper.react.js": {
    "description": "A Dash material-ui Paper component",
    "displayName": "Paper",
    "methods": [],
    "props": {
      "children": {
        "flowType": {
          "name": "Node"
        },
        "required": false,
        "description": "Children passed int othe paper element",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "circle": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "Set ot true to generate a circular paper container",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "rounded": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "By default, the paper container will have a border radius.\nSet this to false to generate a container with sharp corners.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "style": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-styles of the root element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "transitionEnabled": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "Set to false to disable CSS transitions for the paper element",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "zDepth": {
        "flowType": {
          "name": "unknown"
        },
        "required": false,
        "description": "This number represents the zDepth of the paper shadow",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      }
    }
  },
  "src/components/Popover/Popover.react.js": {
    "description": "",
    "displayName": "Popover",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleRequestClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "anchorOrigin": {
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  vertical?: 'top' | 'center' | 'bottom',\n  horizontal?: 'left' | 'middle' | 'right',\n}",
          "signature": {
            "properties": [
              {
                "key": "vertical",
                "value": {
                  "name": "union",
                  "raw": "'top' | 'center' | 'bottom'",
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'top'"
                    },
                    {
                      "name": "literal",
                      "value": "'center'"
                    },
                    {
                      "name": "literal",
                      "value": "'bottom'"
                    }
                  ],
                  "required": false
                }
              },
              {
                "key": "horizontal",
                "value": {
                  "name": "union",
                  "raw": "'left' | 'middle' | 'right'",
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'left'"
                    },
                    {
                      "name": "literal",
                      "value": "'middle'"
                    },
                    {
                      "name": "literal",
                      "value": "'right'"
                    }
                  ],
                  "required": false
                }
              }
            ]
          }
        },
        "required": false,
        "description": "This is the point on the anchor where the popover's targetOrigin will attach to.\nOptions: vertical: [top, center, bottom] horizontal: [left, middle, right].",
        "defaultValue": {
          "value": "{vertical: 'bottom', horizontal: 'left'}",
          "computed": false
        }
      },
      "animated": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "If true, the popover will apply transitions when it is added to the DOM.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "autoCloseWhenOffScreen": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "If true, the popover will hide when the anchor is scrolled off the screen",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "buttonLabel": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "For Dash use - user can assign label to button",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "buttonType": {
        "flowType": {
          "name": "union",
          "raw": "'flat' | 'raised' | 'icon'",
          "elements": [
            {
              "name": "literal",
              "value": "'flat'"
            },
            {
              "name": "literal",
              "value": "'raised'"
            },
            {
              "name": "literal",
              "value": "'icon'"
            }
          ]
        },
        "required": false,
        "description": "For Dash use - user can anchor the popover to flat, icon, or raised button",
        "defaultValue": {
          "value": "'raised'",
          "computed": false
        }
      },
      "buttonIcon": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "For Dash use - specify what icon to use when using an icon button",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "buttonStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "For Dash use - specify the styles for the button",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "canAutoPosition": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "If true, the popover (potentially) ignores targetOrigin and anchorOrigin to make itself fit\non screen, which is useful for mobile devices.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "children": {
        "flowType": {
          "name": "Node"
        },
        "required": false,
        "description": "The content of the popover",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "className": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "The CSS class name of the root element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "open": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "If true, the popover is visible.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "scrollableContainer": {
        "flowType": {
          "name": "union",
          "raw": "Object | string",
          "elements": [
            {
              "name": "Object"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Represents the parent scrollable container. It can be an element or a string like window.",
        "defaultValue": {
          "value": "'window'",
          "computed": false
        }
      },
      "style": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-styles of the root element.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "targetOrigin": {
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  vertical?: 'top' | 'center' | 'bottom',\n  horizontal?: 'left' | 'middle' | 'right',\n}",
          "signature": {
            "properties": [
              {
                "key": "vertical",
                "value": {
                  "name": "union",
                  "raw": "'top' | 'center' | 'bottom'",
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'top'"
                    },
                    {
                      "name": "literal",
                      "value": "'center'"
                    },
                    {
                      "name": "literal",
                      "value": "'bottom'"
                    }
                  ],
                  "required": false
                }
              },
              {
                "key": "horizontal",
                "value": {
                  "name": "union",
                  "raw": "'left' | 'middle' | 'right'",
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'left'"
                    },
                    {
                      "name": "literal",
                      "value": "'middle'"
                    },
                    {
                      "name": "literal",
                      "value": "'right'"
                    }
                  ],
                  "required": false
                }
              }
            ]
          }
        },
        "required": false,
        "description": "This is the point on the popover which will attach to the anchor's origin.\nOptions: vertical: [top, center, bottom] horizontal: [left, middle, right].",
        "defaultValue": {
          "value": "{vertical: 'top', horizontal: 'left'}",
          "computed": false
        }
      },
      "useLayerForClickAway": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "If true, the popover will render on top of an invisible layer, which will prevent clicks\nto the underlying elements, and trigger an onRequestClose('clickAway') call.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "zDepth": {
        "flowType": {
          "name": "unknown"
        },
        "required": false,
        "description": "The zDepth of the popover.",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      }
    }
  },
  "src/components/RadioButtonGroup/RadioButtonGroup.react.js": {
    "description": "A Dash material-ui RadioButtonGroup component",
    "displayName": "RadioButtonGroup",
    "methods": [
      {
        "name": "handleChange",
        "docblock": "calls function to fire callback and updates valueSelected in state\n@param event\n@param valueSelected",
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "description": null,
            "type": {
              "name": "Object",
              "alias": "Object"
            }
          },
          {
            "name": "valueSelected",
            "description": null,
            "type": {
              "name": "undefined",
              "alias": "undefined"
            }
          }
        ],
        "returns": null,
        "description": "calls function to fire callback and updates valueSelected in state"
      },
      {
        "name": "buildRadioButton",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "item",
            "type": {
              "name": "signature",
              "type": "object",
              "raw": "{\n  /** If true, the radio button is disabled */\n  disabled?: boolean,\n  /** Override the inline-styles of the icon element */\n  iconStyle?: Object,\n  /** Override the inline-styles of the input element */\n  inputStyle?: Object,\n  /** Label to appear next to button */\n  label?: string,\n  /** Override the inline-styles of the label element */\n  labelStyle?: Object,\n  /** Override the inline-styles of the root element */\n  style?: Object,\n  /** value of the the radio button */\n  value?: any,\n}",
              "signature": {
                "properties": [
                  {
                    "key": "disabled",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "iconStyle",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "inputStyle",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "label",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "labelStyle",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "style",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "value",
                    "value": {
                      "name": "any",
                      "required": false
                    }
                  }
                ]
              },
              "alias": "SD_RADIO_BUTTON"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "className": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "the css class name of the root element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "defaultSelected": {
        "flowType": {
          "name": "any"
        },
        "required": false,
        "description": "the value property of the radio button that will\nbe selected by default",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "fireEvent": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "required": false,
        "description": "a callback for firng events to dash",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "id": {
        "flowType": {
          "name": "string"
        },
        "required": true,
        "description": "the element's ID"
      },
      "labelPosition": {
        "flowType": {
          "name": "union",
          "raw": "'left' | 'right'",
          "elements": [
            {
              "name": "literal",
              "value": "'left'"
            },
            {
              "name": "literal",
              "value": "'right'"
            }
          ]
        },
        "required": false,
        "description": "where the label will be placed for all child radio buttons;\ntakes precedence over labelPosition property of the RadioButton elements",
        "defaultValue": {
          "value": "'right'",
          "computed": false
        }
      },
      "name": {
        "flowType": {
          "name": "string"
        },
        "required": true,
        "description": "the name that will be applied to all child radio buttons"
      },
      "options": {
        "flowType": {
          "name": "Array",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{\n  /** If true, the radio button is disabled */\n  disabled?: boolean,\n  /** Override the inline-styles of the icon element */\n  iconStyle?: Object,\n  /** Override the inline-styles of the input element */\n  inputStyle?: Object,\n  /** Label to appear next to button */\n  label?: string,\n  /** Override the inline-styles of the label element */\n  labelStyle?: Object,\n  /** Override the inline-styles of the root element */\n  style?: Object,\n  /** value of the the radio button */\n  value?: any,\n}",
              "signature": {
                "properties": [
                  {
                    "key": "disabled",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "iconStyle",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "inputStyle",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "label",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "labelStyle",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "style",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "value",
                    "value": {
                      "name": "any",
                      "required": false
                    }
                  }
                ]
              }
            }
          ],
          "raw": "Array<SD_RADIO_BUTTON>"
        },
        "required": false,
        "description": "used to create the RadioButtons to populate the RadioButtonGroup with. A Dash user passes in a\nlist of dict items, each one having at least a `value` and `label`. If that value is selected,\nvalueSelected will be updated",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "setProps": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "required": false,
        "description": "dash callback to update props on the server",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "style": {
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{}",
          "signature": {
            "properties": []
          }
        },
        "required": false,
        "description": "override the inline-styles of the root element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "valueSelected": {
        "flowType": {
          "name": "any"
        },
        "required": false,
        "description": "value of the currently selected radio button",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      }
    }
  },
  "src/components/RaisedButton/RaisedButton.react.js": {
    "description": "",
    "displayName": "RaisedButton",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "backgroundColor": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "Override the default background color for the button, but not the default disabled\nbackground color (use disabledBackgroundColor for this).",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "buttonStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline styles of the button element.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "children": {
        "flowType": {
          "name": "Node"
        },
        "required": false,
        "description": "The content of the button. If a label is provided via the label prop, the text within the\nlabel will be displayed in addition to the content provided here.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "className": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "CSS class name of the root element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "disableTouchRipple": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "If true, the element's ripple effect will be disabled",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disabled": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "Button is disabled?",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disabledBackgroundColor": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "Override the default background for the disabled button",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "disabledLabelColor": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "Override the default label color for the disabled button",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "fireEvent": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "required": false,
        "description": "Dash event handler for click events",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "fullWidth": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "If true, the button will take up the full width of its container",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "href": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "The URL to link to when the button is clicked",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "icon": {
        "flowType": {
          "name": "Node"
        },
        "required": false,
        "description": "Use this property to display an icon",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "id": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "Element ID"
      },
      "label": {
        "flowType": {
          "name": "string"
        },
        "required": true,
        "description": "The label to be displayed within the button. If content is provided via the children prop,\nthat content will be displayed in addition to the label provided here."
      },
      "labelColor": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "Color of the button's label",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "labelPosition": {
        "flowType": {
          "name": "union",
          "raw": "'before' | 'after'",
          "elements": [
            {
              "name": "literal",
              "value": "'before'"
            },
            {
              "name": "literal",
              "value": "'after'"
            }
          ]
        },
        "required": false,
        "description": "The position of the button's label relative to its children",
        "defaultValue": {
          "value": "'after'",
          "computed": false
        }
      },
      "labelStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline styles of the label element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "n_clicks": {
        "flowType": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times this element has been clicked",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_previous": {
        "flowType": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the previous number of times this element has been clicked",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "overlayStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline style of the button overlay",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "primary": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "If true, the button will use the theme's primary color",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "rippleColor": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "Color of the ripple on click"
      },
      "rippleStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline style of the ripple element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "secondary": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "If true, the button will use the theme's secondary color. If both secondary and primary are\ntrue, the button will use the theme's primary color.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "setProps": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "required": false,
        "description": "Dash callback to update props on the server",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "style": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline styles of the root element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/components/Snackbar/Snackbar.react.js": {
    "description": "",
    "displayName": "Snackbar",
    "methods": [
      {
        "name": "handleOpen",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleActionClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "action": {
        "flowType": {
          "name": "Node"
        },
        "required": false,
        "description": "Label for the action on the snackbar",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "autoHideDuration": {
        "flowType": {
          "name": "number"
        },
        "required": false,
        "description": "The number of milliseconds to wait before automatically dismissing. If no value is specified\nthe snackbar will dismiss normally. If a value is provided the snackbar can still be dismissed\nnormally. If a snackbar is dismissed before the timer expires, the timer will be cleared.",
        "defaultValue": {
          "value": "3000",
          "computed": false
        }
      },
      "bodyStyle": {
        "flowType": {
          "name": "object"
        },
        "required": false,
        "description": "Override the inline styles of the body element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "className": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "CSS class name of the root element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "contentStyle": {
        "flowType": {
          "name": "object"
        },
        "required": false,
        "description": "Override the inline styles of the content element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "fireEvent": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "required": false,
        "description": "Dash event handler for click events",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "id": {
        "flowType": {
          "name": "string"
        },
        "required": true,
        "description": "The element's ID"
      },
      "message": {
        "flowType": {
          "name": "Node"
        },
        "required": true,
        "description": "The message to be displayed.\n(Note: If the message is an element or array, and the Snackbar may re-render while it is\nstill open, ensure that the same object remains as the message property if you want to avoid\nthe Snackbar hiding and showing again)"
      },
      "n_clicks": {
        "flowType": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the number of times that action button has been clicked",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "open": {
        "flowType": {
          "name": "boolean"
        },
        "required": true,
        "description": "Controls whether the Snackbar is opened or not"
      },
      "setProps": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "(props: {open?: boolean}) => void",
          "signature": {
            "arguments": [
              {
                "name": "props",
                "type": {
                  "name": "signature",
                  "type": "object",
                  "raw": "{open?: boolean}",
                  "signature": {
                    "properties": [
                      {
                        "key": "open",
                        "value": {
                          "name": "boolean",
                          "required": false
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "required": false,
        "description": "Dash callback to update props on the server",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "style": {
        "flowType": {
          "name": "object"
        },
        "required": false,
        "description": "Override the inline styles of the root element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/components/Stepper/Stepper.react.js": {
    "description": "",
    "displayName": "Stepper",
    "methods": [
      {
        "name": "handleNext",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handlePrev",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "resetSteps",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "createSteps",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "stepCount",
            "type": {
              "name": "number"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "activeStep": {
        "flowType": {
          "name": "number"
        },
        "required": false,
        "description": "Set the active step (zero based index). This will enable Step control helpers",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "backButtonStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "The style for the back button",
        "defaultValue": {
          "value": "{marginRight: 12}",
          "computed": false
        }
      },
      "className": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "CSS class name of the root element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "finishedButtonStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "The style for the button displayed after all steps have been finished",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "finishedText": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "The text to display on the final button when all steps have been completed",
        "defaultValue": {
          "value": "'Click here to view again'",
          "computed": false
        }
      },
      "fireEvent": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "required": false,
        "description": "Dash event handler for click events",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "id": {
        "flowType": {
          "name": "string"
        },
        "required": true,
        "description": "Dash ID"
      },
      "linear": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "If set to true, the Stepper will assist in controlling steps for linear flow",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "nextButtonStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "The style for the next button",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "orientation": {
        "flowType": {
          "name": "union",
          "raw": "'horizontal' | 'vertical'",
          "elements": [
            {
              "name": "literal",
              "value": "'horizontal'"
            },
            {
              "name": "literal",
              "value": "'vertical'"
            }
          ]
        },
        "required": false,
        "description": "The stepper orientation (layout flow direction)",
        "defaultValue": {
          "value": "'horizontal'",
          "computed": false
        }
      },
      "setProps": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "(props: {stepIndex?: number}) => void",
          "signature": {
            "arguments": [
              {
                "name": "props",
                "type": {
                  "name": "signature",
                  "type": "object",
                  "raw": "{stepIndex?: number}",
                  "signature": {
                    "properties": [
                      {
                        "key": "stepIndex",
                        "value": {
                          "name": "number",
                          "required": false
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "required": false,
        "description": "Dash callback to update props on the server",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "stepCount": {
        "flowType": {
          "name": "number"
        },
        "required": false,
        "description": "The number of steps that this component will contain",
        "defaultValue": {
          "value": "3",
          "computed": false
        }
      },
      "stepLabels": {
        "flowType": {
          "name": "Array",
          "elements": [
            {
              "name": "string"
            }
          ],
          "raw": "Array<string>"
        },
        "required": false,
        "description": "The text labels that will be shown next to each step number. The length of this array must\nmatch the total number of steps",
        "defaultValue": {
          "value": "['Step 1', 'Step 2', 'Step 3']",
          "computed": false
        }
      },
      "style": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-style of the root element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/components/Subheader/Subheader.react.js": {
    "description": "",
    "displayName": "Subheader",
    "methods": [],
    "props": {
      "children": {
        "flowType": {
          "name": "Node"
        },
        "required": false,
        "description": "Node that will be placed inside the Subheader",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "inset": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "If true, the Subheader will be indented",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "style": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-styles of the root element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/components/Tabs/Tabs.react.js": {
    "description": "",
    "displayName": "Tabs",
    "methods": [],
    "props": {
      "id": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "Element ID",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "className": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "CSS class name of the root element",
        "defaultValue": {
          "value": "undefined",
          "computed": true
        }
      },
      "contentContainerClassName": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "CSS class name of the content's container",
        "defaultValue": {
          "value": "undefined",
          "computed": true
        }
      },
      "children": {
        "flowType": {
          "name": "Node"
        },
        "required": false,
        "description": "Pass Tab components as children",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "contentContainerStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-styles of the content's container",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "initialSelectedIndex": {
        "flowType": {
          "name": "number"
        },
        "required": false,
        "description": "Specify the initial visible tab index",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "inkBarStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-styles of the InkBar",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "inkBarContainerStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-styles of the InkBar container",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "style": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-styles of the root element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "tabItemContainerStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-styles of tab-labels container",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "tabTemplateStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline-styles of the tab template"
      },
      "value": {
        "flowType": {
          "name": "any"
        },
        "required": false,
        "description": "Makes Tabs controllable and selects the tab whose value prop matches this prop",
        "defaultValue": {
          "value": "undefined",
          "computed": true
        }
      },
      "tabPropsArray": {
        "flowType": {
          "name": "Array",
          "elements": [
            {
              "name": "Object"
            }
          ],
          "raw": "Array<Object>"
        },
        "required": true,
        "description": ""
      }
    }
  },
  "src/components/Toggle/Toggle.react.js": {
    "description": "",
    "displayName": "Toggle",
    "methods": [
      {
        "name": "handleToggle",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "toggled",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "disabled": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "Toggle disabled?",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "elementStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline style of the Toggle element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "fireEvent": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "required": false,
        "description": "Dash event handler for click events",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "iconStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline style of the Icon element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "id": {
        "flowType": {
          "name": "string"
        },
        "required": true,
        "description": "Element ID"
      },
      "inputStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline styles of the input element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "label": {
        "flowType": {
          "name": "Node"
        },
        "required": false,
        "description": "Label for toggle",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "labelPosition": {
        "flowType": {
          "name": "union",
          "raw": "'left' | 'right'",
          "elements": [
            {
              "name": "literal",
              "value": "'left'"
            },
            {
              "name": "literal",
              "value": "'right'"
            }
          ]
        },
        "required": false,
        "description": "Where the label will be placed next to the toggle",
        "defaultValue": {
          "value": "'left'",
          "computed": false
        }
      },
      "labelStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline styles of the Toggle element label",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "rippleStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override ripple style on click",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "setProps": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "required": false,
        "description": "Dash callback to update props",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "style": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline styles of the root element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "thumbStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override style for thumb",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "thumbSwitchedStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline styles for thumb when the toggle switches",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "toggled": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "Toggled on if true",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "trackStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline style for track",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "trackSwitchedStyle": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Override the inline styles for track when the toggle switches",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/components/__special/Questions.js": {
    "description": "",
    "displayName": "Questions",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "questionValue",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "flowType": {
          "name": "string"
        },
        "required": true,
        "description": "Component ID"
      },
      "questionSectionProps": {
        "flowType": {
          "name": "Array",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{\n  questionProps: Array<QuestionProps>,\n  headerTitle: string,\n  titleStyle?: Object,\n  headerTitleStyle?: Object,\n  headerIconStyle?: Object,\n  initiallyExpanded: boolean,\n  clickHandler: (value: string) => void,\n}",
              "signature": {
                "properties": [
                  {
                    "key": "questionProps",
                    "value": {
                      "name": "Array",
                      "elements": [
                        {
                          "name": "signature",
                          "type": "object",
                          "raw": "{\n  questionType: string,\n  questionText: string,\n  answerPrompt: string,\n  value: string,\n  clickHandler: (value: string) => void,\n}",
                          "signature": {
                            "properties": [
                              {
                                "key": "questionType",
                                "value": {
                                  "name": "string",
                                  "required": true
                                }
                              },
                              {
                                "key": "questionText",
                                "value": {
                                  "name": "string",
                                  "required": true
                                }
                              },
                              {
                                "key": "answerPrompt",
                                "value": {
                                  "name": "string",
                                  "required": true
                                }
                              },
                              {
                                "key": "value",
                                "value": {
                                  "name": "string",
                                  "required": true
                                }
                              },
                              {
                                "key": "clickHandler",
                                "value": {
                                  "name": "signature",
                                  "type": "function",
                                  "raw": "(value: string) => void",
                                  "signature": {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "type": {
                                          "name": "string"
                                        }
                                      }
                                    ],
                                    "return": {
                                      "name": "void"
                                    }
                                  },
                                  "required": true
                                }
                              }
                            ]
                          }
                        }
                      ],
                      "raw": "Array<QuestionProps>",
                      "required": true
                    }
                  },
                  {
                    "key": "headerTitle",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "titleStyle",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "headerTitleStyle",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "headerIconStyle",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "initiallyExpanded",
                    "value": {
                      "name": "boolean",
                      "required": true
                    }
                  },
                  {
                    "key": "clickHandler",
                    "value": {
                      "name": "signature",
                      "type": "function",
                      "raw": "(value: string) => void",
                      "signature": {
                        "arguments": [
                          {
                            "name": "value",
                            "type": {
                              "name": "string"
                            }
                          }
                        ],
                        "return": {
                          "name": "void"
                        }
                      },
                      "required": true
                    }
                  }
                ]
              }
            }
          ],
          "raw": "Array<QuestionSectionProps>"
        },
        "required": true,
        "description": "Array of props for each QuestionSection"
      },
      "n_clicks": {
        "flowType": {
          "name": "number"
        },
        "required": false,
        "description": "Number of clicks by the user on the Questions component",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_previous": {
        "flowType": {
          "name": "number"
        },
        "required": false,
        "description": "The previous number of clicks from the Questions component",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "value": {
        "flowType": {
          "name": "any"
        },
        "required": true,
        "description": "The value currently selected by clicking on a question answer prompt"
      },
      "setProps": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "required": false,
        "description": "Dash callback to update props",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "fireEvent": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "required": false,
        "description": "Dash callback to trigger an event handler",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      }
    }
  },
  "src/components/__special/QuestionsTabs.js": {
    "description": "",
    "displayName": "QuestionsTabs",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "questionValue",
            "type": {
              "name": "string"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "flowType": {
          "name": "string"
        },
        "required": true,
        "description": "Component ID"
      },
      "questionSectionProps": {
        "flowType": {
          "name": "Array",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{\n  questionProps: Array<QuestionProps>,\n  headerTitle: string,\n  clickHandler: (value: string) => void,\n}",
              "signature": {
                "properties": [
                  {
                    "key": "questionProps",
                    "value": {
                      "name": "Array",
                      "elements": [
                        {
                          "name": "signature",
                          "type": "object",
                          "raw": "{\n  questionText: string,\n  value: string,\n  clickHandler: (value: string) => void,\n}",
                          "signature": {
                            "properties": [
                              {
                                "key": "questionText",
                                "value": {
                                  "name": "string",
                                  "required": true
                                }
                              },
                              {
                                "key": "value",
                                "value": {
                                  "name": "string",
                                  "required": true
                                }
                              },
                              {
                                "key": "clickHandler",
                                "value": {
                                  "name": "signature",
                                  "type": "function",
                                  "raw": "(value: string) => void",
                                  "signature": {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "type": {
                                          "name": "string"
                                        }
                                      }
                                    ],
                                    "return": {
                                      "name": "void"
                                    }
                                  },
                                  "required": true
                                }
                              }
                            ]
                          }
                        }
                      ],
                      "raw": "Array<QuestionProps>",
                      "required": true
                    }
                  },
                  {
                    "key": "headerTitle",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "clickHandler",
                    "value": {
                      "name": "signature",
                      "type": "function",
                      "raw": "(value: string) => void",
                      "signature": {
                        "arguments": [
                          {
                            "name": "value",
                            "type": {
                              "name": "string"
                            }
                          }
                        ],
                        "return": {
                          "name": "void"
                        }
                      },
                      "required": true
                    }
                  }
                ]
              }
            }
          ],
          "raw": "Array<QuestionSectionProps>"
        },
        "required": true,
        "description": "Array of props for each QuestionSection"
      },
      "n_clicks": {
        "flowType": {
          "name": "number"
        },
        "required": false,
        "description": "Number of clicks by the user on the Questions component",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_previous": {
        "flowType": {
          "name": "number"
        },
        "required": false,
        "description": "The previous number of clicks from the Questions component",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "value": {
        "flowType": {
          "name": "any"
        },
        "required": true,
        "description": "The value currently selected by clicking on a question answer prompt"
      },
      "tabsProps": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Tabs props",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "setProps": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "required": false,
        "description": "Dash callback to update props",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "fireEvent": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "required": false,
        "description": "Dash callback to trigger an event handler",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      }
    }
  }
}